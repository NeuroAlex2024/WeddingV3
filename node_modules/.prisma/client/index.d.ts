
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ContractorProfile
 * 
 */
export type ContractorProfile = $Result.DefaultSelection<Prisma.$ContractorProfilePayload>
/**
 * Model WeddingProfile
 * 
 */
export type WeddingProfile = $Result.DefaultSelection<Prisma.$WeddingProfilePayload>
/**
 * Model InvitationMeta
 * 
 */
export type InvitationMeta = $Result.DefaultSelection<Prisma.$InvitationMetaPayload>
/**
 * Model Guest
 * 
 */
export type Guest = $Result.DefaultSelection<Prisma.$GuestPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.contractorProfile`: Exposes CRUD operations for the **ContractorProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractorProfiles
    * const contractorProfiles = await prisma.contractorProfile.findMany()
    * ```
    */
  get contractorProfile(): Prisma.ContractorProfileDelegate<ExtArgs>;

  /**
   * `prisma.weddingProfile`: Exposes CRUD operations for the **WeddingProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeddingProfiles
    * const weddingProfiles = await prisma.weddingProfile.findMany()
    * ```
    */
  get weddingProfile(): Prisma.WeddingProfileDelegate<ExtArgs>;

  /**
   * `prisma.invitationMeta`: Exposes CRUD operations for the **InvitationMeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvitationMetas
    * const invitationMetas = await prisma.invitationMeta.findMany()
    * ```
    */
  get invitationMeta(): Prisma.InvitationMetaDelegate<ExtArgs>;

  /**
   * `prisma.guest`: Exposes CRUD operations for the **Guest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guests
    * const guests = await prisma.guest.findMany()
    * ```
    */
  get guest(): Prisma.GuestDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ContractorProfile: 'ContractorProfile',
    WeddingProfile: 'WeddingProfile',
    InvitationMeta: 'InvitationMeta',
    Guest: 'Guest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "contractorProfile" | "weddingProfile" | "invitationMeta" | "guest"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ContractorProfile: {
        payload: Prisma.$ContractorProfilePayload<ExtArgs>
        fields: Prisma.ContractorProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractorProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractorProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          findFirst: {
            args: Prisma.ContractorProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractorProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          findMany: {
            args: Prisma.ContractorProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>[]
          }
          create: {
            args: Prisma.ContractorProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          createMany: {
            args: Prisma.ContractorProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractorProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>[]
          }
          delete: {
            args: Prisma.ContractorProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          update: {
            args: Prisma.ContractorProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          deleteMany: {
            args: Prisma.ContractorProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractorProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractorProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractorProfilePayload>
          }
          aggregate: {
            args: Prisma.ContractorProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractorProfile>
          }
          groupBy: {
            args: Prisma.ContractorProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractorProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractorProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ContractorProfileCountAggregateOutputType> | number
          }
        }
      }
      WeddingProfile: {
        payload: Prisma.$WeddingProfilePayload<ExtArgs>
        fields: Prisma.WeddingProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeddingProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeddingProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          findFirst: {
            args: Prisma.WeddingProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeddingProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          findMany: {
            args: Prisma.WeddingProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>[]
          }
          create: {
            args: Prisma.WeddingProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          createMany: {
            args: Prisma.WeddingProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeddingProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>[]
          }
          delete: {
            args: Prisma.WeddingProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          update: {
            args: Prisma.WeddingProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          deleteMany: {
            args: Prisma.WeddingProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeddingProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WeddingProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeddingProfilePayload>
          }
          aggregate: {
            args: Prisma.WeddingProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeddingProfile>
          }
          groupBy: {
            args: Prisma.WeddingProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeddingProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeddingProfileCountArgs<ExtArgs>
            result: $Utils.Optional<WeddingProfileCountAggregateOutputType> | number
          }
        }
      }
      InvitationMeta: {
        payload: Prisma.$InvitationMetaPayload<ExtArgs>
        fields: Prisma.InvitationMetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationMetaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationMetaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          findFirst: {
            args: Prisma.InvitationMetaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationMetaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          findMany: {
            args: Prisma.InvitationMetaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>[]
          }
          create: {
            args: Prisma.InvitationMetaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          createMany: {
            args: Prisma.InvitationMetaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationMetaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>[]
          }
          delete: {
            args: Prisma.InvitationMetaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          update: {
            args: Prisma.InvitationMetaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          deleteMany: {
            args: Prisma.InvitationMetaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationMetaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InvitationMetaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationMetaPayload>
          }
          aggregate: {
            args: Prisma.InvitationMetaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitationMeta>
          }
          groupBy: {
            args: Prisma.InvitationMetaGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationMetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationMetaCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationMetaCountAggregateOutputType> | number
          }
        }
      }
      Guest: {
        payload: Prisma.$GuestPayload<ExtArgs>
        fields: Prisma.GuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          findFirst: {
            args: Prisma.GuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          findMany: {
            args: Prisma.GuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>[]
          }
          create: {
            args: Prisma.GuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          createMany: {
            args: Prisma.GuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>[]
          }
          delete: {
            args: Prisma.GuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          update: {
            args: Prisma.GuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          deleteMany: {
            args: Prisma.GuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          aggregate: {
            args: Prisma.GuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuest>
          }
          groupBy: {
            args: Prisma.GuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuestCountArgs<ExtArgs>
            result: $Utils.Optional<GuestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    invitations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitations?: boolean | UserCountOutputTypeCountInvitationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationMetaWhereInput
  }


  /**
   * Count Type WeddingProfileCountOutputType
   */

  export type WeddingProfileCountOutputType = {
    guests: number
  }

  export type WeddingProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guests?: boolean | WeddingProfileCountOutputTypeCountGuestsArgs
  }

  // Custom InputTypes
  /**
   * WeddingProfileCountOutputType without action
   */
  export type WeddingProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfileCountOutputType
     */
    select?: WeddingProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WeddingProfileCountOutputType without action
   */
  export type WeddingProfileCountOutputTypeCountGuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestWhereInput
  }


  /**
   * Count Type InvitationMetaCountOutputType
   */

  export type InvitationMetaCountOutputType = {
    guests: number
  }

  export type InvitationMetaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guests?: boolean | InvitationMetaCountOutputTypeCountGuestsArgs
  }

  // Custom InputTypes
  /**
   * InvitationMetaCountOutputType without action
   */
  export type InvitationMetaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMetaCountOutputType
     */
    select?: InvitationMetaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvitationMetaCountOutputType without action
   */
  export type InvitationMetaCountOutputTypeCountGuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    phoneConfirmed: boolean | null
    role: string | null
    passwordHash: string | null
    refreshTokenHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    phoneConfirmed: boolean | null
    role: string | null
    passwordHash: string | null
    refreshTokenHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    phoneConfirmed: number
    role: number
    passwordHash: number
    refreshTokenHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    phoneConfirmed?: true
    role?: true
    passwordHash?: true
    refreshTokenHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    phoneConfirmed?: true
    role?: true
    passwordHash?: true
    refreshTokenHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    phoneConfirmed?: true
    role?: true
    passwordHash?: true
    refreshTokenHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    phone: string
    phoneConfirmed: boolean
    role: string
    passwordHash: string
    refreshTokenHash: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    phoneConfirmed?: boolean
    role?: boolean
    passwordHash?: boolean
    refreshTokenHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contractorProfile?: boolean | User$contractorProfileArgs<ExtArgs>
    weddingProfile?: boolean | User$weddingProfileArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    phoneConfirmed?: boolean
    role?: boolean
    passwordHash?: boolean
    refreshTokenHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    phoneConfirmed?: boolean
    role?: boolean
    passwordHash?: boolean
    refreshTokenHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contractorProfile?: boolean | User$contractorProfileArgs<ExtArgs>
    weddingProfile?: boolean | User$weddingProfileArgs<ExtArgs>
    invitations?: boolean | User$invitationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      contractorProfile: Prisma.$ContractorProfilePayload<ExtArgs> | null
      weddingProfile: Prisma.$WeddingProfilePayload<ExtArgs> | null
      invitations: Prisma.$InvitationMetaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      phone: string
      phoneConfirmed: boolean
      role: string
      passwordHash: string
      refreshTokenHash: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contractorProfile<T extends User$contractorProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$contractorProfileArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    weddingProfile<T extends User$weddingProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$weddingProfileArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    invitations<T extends User$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly phoneConfirmed: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly refreshTokenHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.contractorProfile
   */
  export type User$contractorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    where?: ContractorProfileWhereInput
  }

  /**
   * User.weddingProfile
   */
  export type User$weddingProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    where?: WeddingProfileWhereInput
  }

  /**
   * User.invitations
   */
  export type User$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    where?: InvitationMetaWhereInput
    orderBy?: InvitationMetaOrderByWithRelationInput | InvitationMetaOrderByWithRelationInput[]
    cursor?: InvitationMetaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationMetaScalarFieldEnum | InvitationMetaScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ContractorProfile
   */

  export type AggregateContractorProfile = {
    _count: ContractorProfileCountAggregateOutputType | null
    _min: ContractorProfileMinAggregateOutputType | null
    _max: ContractorProfileMaxAggregateOutputType | null
  }

  export type ContractorProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractorProfileCountAggregateOutputType = {
    id: number
    userId: number
    companyName: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractorProfileMinAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractorProfileCountAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractorProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractorProfile to aggregate.
     */
    where?: ContractorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractorProfiles to fetch.
     */
    orderBy?: ContractorProfileOrderByWithRelationInput | ContractorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractorProfiles
    **/
    _count?: true | ContractorProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractorProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractorProfileMaxAggregateInputType
  }

  export type GetContractorProfileAggregateType<T extends ContractorProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateContractorProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractorProfile[P]>
      : GetScalarType<T[P], AggregateContractorProfile[P]>
  }




  export type ContractorProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractorProfileWhereInput
    orderBy?: ContractorProfileOrderByWithAggregationInput | ContractorProfileOrderByWithAggregationInput[]
    by: ContractorProfileScalarFieldEnum[] | ContractorProfileScalarFieldEnum
    having?: ContractorProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractorProfileCountAggregateInputType | true
    _min?: ContractorProfileMinAggregateInputType
    _max?: ContractorProfileMaxAggregateInputType
  }

  export type ContractorProfileGroupByOutputType = {
    id: string
    userId: string
    companyName: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContractorProfileCountAggregateOutputType | null
    _min: ContractorProfileMinAggregateOutputType | null
    _max: ContractorProfileMaxAggregateOutputType | null
  }

  type GetContractorProfileGroupByPayload<T extends ContractorProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractorProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractorProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractorProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ContractorProfileGroupByOutputType[P]>
        }
      >
    >


  export type ContractorProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractorProfile"]>

  export type ContractorProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractorProfile"]>

  export type ContractorProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    companyName?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractorProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContractorProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContractorProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractorProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      companyName: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contractorProfile"]>
    composites: {}
  }

  type ContractorProfileGetPayload<S extends boolean | null | undefined | ContractorProfileDefaultArgs> = $Result.GetResult<Prisma.$ContractorProfilePayload, S>

  type ContractorProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContractorProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContractorProfileCountAggregateInputType | true
    }

  export interface ContractorProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractorProfile'], meta: { name: 'ContractorProfile' } }
    /**
     * Find zero or one ContractorProfile that matches the filter.
     * @param {ContractorProfileFindUniqueArgs} args - Arguments to find a ContractorProfile
     * @example
     * // Get one ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractorProfileFindUniqueArgs>(args: SelectSubset<T, ContractorProfileFindUniqueArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContractorProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContractorProfileFindUniqueOrThrowArgs} args - Arguments to find a ContractorProfile
     * @example
     * // Get one ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractorProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractorProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContractorProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileFindFirstArgs} args - Arguments to find a ContractorProfile
     * @example
     * // Get one ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractorProfileFindFirstArgs>(args?: SelectSubset<T, ContractorProfileFindFirstArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContractorProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileFindFirstOrThrowArgs} args - Arguments to find a ContractorProfile
     * @example
     * // Get one ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractorProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractorProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContractorProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractorProfiles
     * const contractorProfiles = await prisma.contractorProfile.findMany()
     * 
     * // Get first 10 ContractorProfiles
     * const contractorProfiles = await prisma.contractorProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractorProfileWithIdOnly = await prisma.contractorProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractorProfileFindManyArgs>(args?: SelectSubset<T, ContractorProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContractorProfile.
     * @param {ContractorProfileCreateArgs} args - Arguments to create a ContractorProfile.
     * @example
     * // Create one ContractorProfile
     * const ContractorProfile = await prisma.contractorProfile.create({
     *   data: {
     *     // ... data to create a ContractorProfile
     *   }
     * })
     * 
     */
    create<T extends ContractorProfileCreateArgs>(args: SelectSubset<T, ContractorProfileCreateArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContractorProfiles.
     * @param {ContractorProfileCreateManyArgs} args - Arguments to create many ContractorProfiles.
     * @example
     * // Create many ContractorProfiles
     * const contractorProfile = await prisma.contractorProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractorProfileCreateManyArgs>(args?: SelectSubset<T, ContractorProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContractorProfiles and returns the data saved in the database.
     * @param {ContractorProfileCreateManyAndReturnArgs} args - Arguments to create many ContractorProfiles.
     * @example
     * // Create many ContractorProfiles
     * const contractorProfile = await prisma.contractorProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContractorProfiles and only return the `id`
     * const contractorProfileWithIdOnly = await prisma.contractorProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractorProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractorProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContractorProfile.
     * @param {ContractorProfileDeleteArgs} args - Arguments to delete one ContractorProfile.
     * @example
     * // Delete one ContractorProfile
     * const ContractorProfile = await prisma.contractorProfile.delete({
     *   where: {
     *     // ... filter to delete one ContractorProfile
     *   }
     * })
     * 
     */
    delete<T extends ContractorProfileDeleteArgs>(args: SelectSubset<T, ContractorProfileDeleteArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContractorProfile.
     * @param {ContractorProfileUpdateArgs} args - Arguments to update one ContractorProfile.
     * @example
     * // Update one ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractorProfileUpdateArgs>(args: SelectSubset<T, ContractorProfileUpdateArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContractorProfiles.
     * @param {ContractorProfileDeleteManyArgs} args - Arguments to filter ContractorProfiles to delete.
     * @example
     * // Delete a few ContractorProfiles
     * const { count } = await prisma.contractorProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractorProfileDeleteManyArgs>(args?: SelectSubset<T, ContractorProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractorProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractorProfiles
     * const contractorProfile = await prisma.contractorProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractorProfileUpdateManyArgs>(args: SelectSubset<T, ContractorProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContractorProfile.
     * @param {ContractorProfileUpsertArgs} args - Arguments to update or create a ContractorProfile.
     * @example
     * // Update or create a ContractorProfile
     * const contractorProfile = await prisma.contractorProfile.upsert({
     *   create: {
     *     // ... data to create a ContractorProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractorProfile we want to update
     *   }
     * })
     */
    upsert<T extends ContractorProfileUpsertArgs>(args: SelectSubset<T, ContractorProfileUpsertArgs<ExtArgs>>): Prisma__ContractorProfileClient<$Result.GetResult<Prisma.$ContractorProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContractorProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileCountArgs} args - Arguments to filter ContractorProfiles to count.
     * @example
     * // Count the number of ContractorProfiles
     * const count = await prisma.contractorProfile.count({
     *   where: {
     *     // ... the filter for the ContractorProfiles we want to count
     *   }
     * })
    **/
    count<T extends ContractorProfileCountArgs>(
      args?: Subset<T, ContractorProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractorProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractorProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractorProfileAggregateArgs>(args: Subset<T, ContractorProfileAggregateArgs>): Prisma.PrismaPromise<GetContractorProfileAggregateType<T>>

    /**
     * Group by ContractorProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractorProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractorProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractorProfileGroupByArgs['orderBy'] }
        : { orderBy?: ContractorProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractorProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractorProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractorProfile model
   */
  readonly fields: ContractorProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractorProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractorProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractorProfile model
   */ 
  interface ContractorProfileFieldRefs {
    readonly id: FieldRef<"ContractorProfile", 'String'>
    readonly userId: FieldRef<"ContractorProfile", 'String'>
    readonly companyName: FieldRef<"ContractorProfile", 'String'>
    readonly description: FieldRef<"ContractorProfile", 'String'>
    readonly createdAt: FieldRef<"ContractorProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"ContractorProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContractorProfile findUnique
   */
  export type ContractorProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter, which ContractorProfile to fetch.
     */
    where: ContractorProfileWhereUniqueInput
  }

  /**
   * ContractorProfile findUniqueOrThrow
   */
  export type ContractorProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter, which ContractorProfile to fetch.
     */
    where: ContractorProfileWhereUniqueInput
  }

  /**
   * ContractorProfile findFirst
   */
  export type ContractorProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter, which ContractorProfile to fetch.
     */
    where?: ContractorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractorProfiles to fetch.
     */
    orderBy?: ContractorProfileOrderByWithRelationInput | ContractorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractorProfiles.
     */
    cursor?: ContractorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractorProfiles.
     */
    distinct?: ContractorProfileScalarFieldEnum | ContractorProfileScalarFieldEnum[]
  }

  /**
   * ContractorProfile findFirstOrThrow
   */
  export type ContractorProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter, which ContractorProfile to fetch.
     */
    where?: ContractorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractorProfiles to fetch.
     */
    orderBy?: ContractorProfileOrderByWithRelationInput | ContractorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractorProfiles.
     */
    cursor?: ContractorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractorProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractorProfiles.
     */
    distinct?: ContractorProfileScalarFieldEnum | ContractorProfileScalarFieldEnum[]
  }

  /**
   * ContractorProfile findMany
   */
  export type ContractorProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter, which ContractorProfiles to fetch.
     */
    where?: ContractorProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractorProfiles to fetch.
     */
    orderBy?: ContractorProfileOrderByWithRelationInput | ContractorProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractorProfiles.
     */
    cursor?: ContractorProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractorProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractorProfiles.
     */
    skip?: number
    distinct?: ContractorProfileScalarFieldEnum | ContractorProfileScalarFieldEnum[]
  }

  /**
   * ContractorProfile create
   */
  export type ContractorProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractorProfile.
     */
    data: XOR<ContractorProfileCreateInput, ContractorProfileUncheckedCreateInput>
  }

  /**
   * ContractorProfile createMany
   */
  export type ContractorProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractorProfiles.
     */
    data: ContractorProfileCreateManyInput | ContractorProfileCreateManyInput[]
  }

  /**
   * ContractorProfile createManyAndReturn
   */
  export type ContractorProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContractorProfiles.
     */
    data: ContractorProfileCreateManyInput | ContractorProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContractorProfile update
   */
  export type ContractorProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractorProfile.
     */
    data: XOR<ContractorProfileUpdateInput, ContractorProfileUncheckedUpdateInput>
    /**
     * Choose, which ContractorProfile to update.
     */
    where: ContractorProfileWhereUniqueInput
  }

  /**
   * ContractorProfile updateMany
   */
  export type ContractorProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractorProfiles.
     */
    data: XOR<ContractorProfileUpdateManyMutationInput, ContractorProfileUncheckedUpdateManyInput>
    /**
     * Filter which ContractorProfiles to update
     */
    where?: ContractorProfileWhereInput
  }

  /**
   * ContractorProfile upsert
   */
  export type ContractorProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractorProfile to update in case it exists.
     */
    where: ContractorProfileWhereUniqueInput
    /**
     * In case the ContractorProfile found by the `where` argument doesn't exist, create a new ContractorProfile with this data.
     */
    create: XOR<ContractorProfileCreateInput, ContractorProfileUncheckedCreateInput>
    /**
     * In case the ContractorProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractorProfileUpdateInput, ContractorProfileUncheckedUpdateInput>
  }

  /**
   * ContractorProfile delete
   */
  export type ContractorProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
    /**
     * Filter which ContractorProfile to delete.
     */
    where: ContractorProfileWhereUniqueInput
  }

  /**
   * ContractorProfile deleteMany
   */
  export type ContractorProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractorProfiles to delete
     */
    where?: ContractorProfileWhereInput
  }

  /**
   * ContractorProfile without action
   */
  export type ContractorProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractorProfile
     */
    select?: ContractorProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractorProfileInclude<ExtArgs> | null
  }


  /**
   * Model WeddingProfile
   */

  export type AggregateWeddingProfile = {
    _count: WeddingProfileCountAggregateOutputType | null
    _min: WeddingProfileMinAggregateOutputType | null
    _max: WeddingProfileMaxAggregateOutputType | null
  }

  export type WeddingProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    coupleNames: string | null
    eventDate: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeddingProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    coupleNames: string | null
    eventDate: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeddingProfileCountAggregateOutputType = {
    id: number
    userId: number
    coupleNames: number
    eventDate: number
    location: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WeddingProfileMinAggregateInputType = {
    id?: true
    userId?: true
    coupleNames?: true
    eventDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeddingProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    coupleNames?: true
    eventDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeddingProfileCountAggregateInputType = {
    id?: true
    userId?: true
    coupleNames?: true
    eventDate?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WeddingProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeddingProfile to aggregate.
     */
    where?: WeddingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeddingProfiles to fetch.
     */
    orderBy?: WeddingProfileOrderByWithRelationInput | WeddingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeddingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeddingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeddingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeddingProfiles
    **/
    _count?: true | WeddingProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeddingProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeddingProfileMaxAggregateInputType
  }

  export type GetWeddingProfileAggregateType<T extends WeddingProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateWeddingProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeddingProfile[P]>
      : GetScalarType<T[P], AggregateWeddingProfile[P]>
  }




  export type WeddingProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeddingProfileWhereInput
    orderBy?: WeddingProfileOrderByWithAggregationInput | WeddingProfileOrderByWithAggregationInput[]
    by: WeddingProfileScalarFieldEnum[] | WeddingProfileScalarFieldEnum
    having?: WeddingProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeddingProfileCountAggregateInputType | true
    _min?: WeddingProfileMinAggregateInputType
    _max?: WeddingProfileMaxAggregateInputType
  }

  export type WeddingProfileGroupByOutputType = {
    id: string
    userId: string
    coupleNames: string
    eventDate: Date | null
    location: string | null
    createdAt: Date
    updatedAt: Date
    _count: WeddingProfileCountAggregateOutputType | null
    _min: WeddingProfileMinAggregateOutputType | null
    _max: WeddingProfileMaxAggregateOutputType | null
  }

  type GetWeddingProfileGroupByPayload<T extends WeddingProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeddingProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeddingProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeddingProfileGroupByOutputType[P]>
            : GetScalarType<T[P], WeddingProfileGroupByOutputType[P]>
        }
      >
    >


  export type WeddingProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    coupleNames?: boolean
    eventDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    guests?: boolean | WeddingProfile$guestsArgs<ExtArgs>
    _count?: boolean | WeddingProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weddingProfile"]>

  export type WeddingProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    coupleNames?: boolean
    eventDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weddingProfile"]>

  export type WeddingProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    coupleNames?: boolean
    eventDate?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WeddingProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    guests?: boolean | WeddingProfile$guestsArgs<ExtArgs>
    _count?: boolean | WeddingProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WeddingProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WeddingProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WeddingProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      guests: Prisma.$GuestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      coupleNames: string
      eventDate: Date | null
      location: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["weddingProfile"]>
    composites: {}
  }

  type WeddingProfileGetPayload<S extends boolean | null | undefined | WeddingProfileDefaultArgs> = $Result.GetResult<Prisma.$WeddingProfilePayload, S>

  type WeddingProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeddingProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeddingProfileCountAggregateInputType | true
    }

  export interface WeddingProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeddingProfile'], meta: { name: 'WeddingProfile' } }
    /**
     * Find zero or one WeddingProfile that matches the filter.
     * @param {WeddingProfileFindUniqueArgs} args - Arguments to find a WeddingProfile
     * @example
     * // Get one WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeddingProfileFindUniqueArgs>(args: SelectSubset<T, WeddingProfileFindUniqueArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WeddingProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WeddingProfileFindUniqueOrThrowArgs} args - Arguments to find a WeddingProfile
     * @example
     * // Get one WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeddingProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, WeddingProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WeddingProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileFindFirstArgs} args - Arguments to find a WeddingProfile
     * @example
     * // Get one WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeddingProfileFindFirstArgs>(args?: SelectSubset<T, WeddingProfileFindFirstArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WeddingProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileFindFirstOrThrowArgs} args - Arguments to find a WeddingProfile
     * @example
     * // Get one WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeddingProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, WeddingProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WeddingProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeddingProfiles
     * const weddingProfiles = await prisma.weddingProfile.findMany()
     * 
     * // Get first 10 WeddingProfiles
     * const weddingProfiles = await prisma.weddingProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weddingProfileWithIdOnly = await prisma.weddingProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeddingProfileFindManyArgs>(args?: SelectSubset<T, WeddingProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WeddingProfile.
     * @param {WeddingProfileCreateArgs} args - Arguments to create a WeddingProfile.
     * @example
     * // Create one WeddingProfile
     * const WeddingProfile = await prisma.weddingProfile.create({
     *   data: {
     *     // ... data to create a WeddingProfile
     *   }
     * })
     * 
     */
    create<T extends WeddingProfileCreateArgs>(args: SelectSubset<T, WeddingProfileCreateArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WeddingProfiles.
     * @param {WeddingProfileCreateManyArgs} args - Arguments to create many WeddingProfiles.
     * @example
     * // Create many WeddingProfiles
     * const weddingProfile = await prisma.weddingProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeddingProfileCreateManyArgs>(args?: SelectSubset<T, WeddingProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeddingProfiles and returns the data saved in the database.
     * @param {WeddingProfileCreateManyAndReturnArgs} args - Arguments to create many WeddingProfiles.
     * @example
     * // Create many WeddingProfiles
     * const weddingProfile = await prisma.weddingProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeddingProfiles and only return the `id`
     * const weddingProfileWithIdOnly = await prisma.weddingProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeddingProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, WeddingProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WeddingProfile.
     * @param {WeddingProfileDeleteArgs} args - Arguments to delete one WeddingProfile.
     * @example
     * // Delete one WeddingProfile
     * const WeddingProfile = await prisma.weddingProfile.delete({
     *   where: {
     *     // ... filter to delete one WeddingProfile
     *   }
     * })
     * 
     */
    delete<T extends WeddingProfileDeleteArgs>(args: SelectSubset<T, WeddingProfileDeleteArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WeddingProfile.
     * @param {WeddingProfileUpdateArgs} args - Arguments to update one WeddingProfile.
     * @example
     * // Update one WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeddingProfileUpdateArgs>(args: SelectSubset<T, WeddingProfileUpdateArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WeddingProfiles.
     * @param {WeddingProfileDeleteManyArgs} args - Arguments to filter WeddingProfiles to delete.
     * @example
     * // Delete a few WeddingProfiles
     * const { count } = await prisma.weddingProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeddingProfileDeleteManyArgs>(args?: SelectSubset<T, WeddingProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeddingProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeddingProfiles
     * const weddingProfile = await prisma.weddingProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeddingProfileUpdateManyArgs>(args: SelectSubset<T, WeddingProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeddingProfile.
     * @param {WeddingProfileUpsertArgs} args - Arguments to update or create a WeddingProfile.
     * @example
     * // Update or create a WeddingProfile
     * const weddingProfile = await prisma.weddingProfile.upsert({
     *   create: {
     *     // ... data to create a WeddingProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeddingProfile we want to update
     *   }
     * })
     */
    upsert<T extends WeddingProfileUpsertArgs>(args: SelectSubset<T, WeddingProfileUpsertArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WeddingProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileCountArgs} args - Arguments to filter WeddingProfiles to count.
     * @example
     * // Count the number of WeddingProfiles
     * const count = await prisma.weddingProfile.count({
     *   where: {
     *     // ... the filter for the WeddingProfiles we want to count
     *   }
     * })
    **/
    count<T extends WeddingProfileCountArgs>(
      args?: Subset<T, WeddingProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeddingProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeddingProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeddingProfileAggregateArgs>(args: Subset<T, WeddingProfileAggregateArgs>): Prisma.PrismaPromise<GetWeddingProfileAggregateType<T>>

    /**
     * Group by WeddingProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeddingProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeddingProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeddingProfileGroupByArgs['orderBy'] }
        : { orderBy?: WeddingProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeddingProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeddingProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeddingProfile model
   */
  readonly fields: WeddingProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeddingProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeddingProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    guests<T extends WeddingProfile$guestsArgs<ExtArgs> = {}>(args?: Subset<T, WeddingProfile$guestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WeddingProfile model
   */ 
  interface WeddingProfileFieldRefs {
    readonly id: FieldRef<"WeddingProfile", 'String'>
    readonly userId: FieldRef<"WeddingProfile", 'String'>
    readonly coupleNames: FieldRef<"WeddingProfile", 'String'>
    readonly eventDate: FieldRef<"WeddingProfile", 'DateTime'>
    readonly location: FieldRef<"WeddingProfile", 'String'>
    readonly createdAt: FieldRef<"WeddingProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"WeddingProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WeddingProfile findUnique
   */
  export type WeddingProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter, which WeddingProfile to fetch.
     */
    where: WeddingProfileWhereUniqueInput
  }

  /**
   * WeddingProfile findUniqueOrThrow
   */
  export type WeddingProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter, which WeddingProfile to fetch.
     */
    where: WeddingProfileWhereUniqueInput
  }

  /**
   * WeddingProfile findFirst
   */
  export type WeddingProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter, which WeddingProfile to fetch.
     */
    where?: WeddingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeddingProfiles to fetch.
     */
    orderBy?: WeddingProfileOrderByWithRelationInput | WeddingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeddingProfiles.
     */
    cursor?: WeddingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeddingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeddingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeddingProfiles.
     */
    distinct?: WeddingProfileScalarFieldEnum | WeddingProfileScalarFieldEnum[]
  }

  /**
   * WeddingProfile findFirstOrThrow
   */
  export type WeddingProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter, which WeddingProfile to fetch.
     */
    where?: WeddingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeddingProfiles to fetch.
     */
    orderBy?: WeddingProfileOrderByWithRelationInput | WeddingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeddingProfiles.
     */
    cursor?: WeddingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeddingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeddingProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeddingProfiles.
     */
    distinct?: WeddingProfileScalarFieldEnum | WeddingProfileScalarFieldEnum[]
  }

  /**
   * WeddingProfile findMany
   */
  export type WeddingProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter, which WeddingProfiles to fetch.
     */
    where?: WeddingProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeddingProfiles to fetch.
     */
    orderBy?: WeddingProfileOrderByWithRelationInput | WeddingProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeddingProfiles.
     */
    cursor?: WeddingProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeddingProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeddingProfiles.
     */
    skip?: number
    distinct?: WeddingProfileScalarFieldEnum | WeddingProfileScalarFieldEnum[]
  }

  /**
   * WeddingProfile create
   */
  export type WeddingProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a WeddingProfile.
     */
    data: XOR<WeddingProfileCreateInput, WeddingProfileUncheckedCreateInput>
  }

  /**
   * WeddingProfile createMany
   */
  export type WeddingProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeddingProfiles.
     */
    data: WeddingProfileCreateManyInput | WeddingProfileCreateManyInput[]
  }

  /**
   * WeddingProfile createManyAndReturn
   */
  export type WeddingProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WeddingProfiles.
     */
    data: WeddingProfileCreateManyInput | WeddingProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WeddingProfile update
   */
  export type WeddingProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a WeddingProfile.
     */
    data: XOR<WeddingProfileUpdateInput, WeddingProfileUncheckedUpdateInput>
    /**
     * Choose, which WeddingProfile to update.
     */
    where: WeddingProfileWhereUniqueInput
  }

  /**
   * WeddingProfile updateMany
   */
  export type WeddingProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeddingProfiles.
     */
    data: XOR<WeddingProfileUpdateManyMutationInput, WeddingProfileUncheckedUpdateManyInput>
    /**
     * Filter which WeddingProfiles to update
     */
    where?: WeddingProfileWhereInput
  }

  /**
   * WeddingProfile upsert
   */
  export type WeddingProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the WeddingProfile to update in case it exists.
     */
    where: WeddingProfileWhereUniqueInput
    /**
     * In case the WeddingProfile found by the `where` argument doesn't exist, create a new WeddingProfile with this data.
     */
    create: XOR<WeddingProfileCreateInput, WeddingProfileUncheckedCreateInput>
    /**
     * In case the WeddingProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeddingProfileUpdateInput, WeddingProfileUncheckedUpdateInput>
  }

  /**
   * WeddingProfile delete
   */
  export type WeddingProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    /**
     * Filter which WeddingProfile to delete.
     */
    where: WeddingProfileWhereUniqueInput
  }

  /**
   * WeddingProfile deleteMany
   */
  export type WeddingProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeddingProfiles to delete
     */
    where?: WeddingProfileWhereInput
  }

  /**
   * WeddingProfile.guests
   */
  export type WeddingProfile$guestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    where?: GuestWhereInput
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    cursor?: GuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * WeddingProfile without action
   */
  export type WeddingProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
  }


  /**
   * Model InvitationMeta
   */

  export type AggregateInvitationMeta = {
    _count: InvitationMetaCountAggregateOutputType | null
    _min: InvitationMetaMinAggregateOutputType | null
    _max: InvitationMetaMaxAggregateOutputType | null
  }

  export type InvitationMetaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    slug: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvitationMetaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    slug: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvitationMetaCountAggregateOutputType = {
    id: number
    userId: number
    slug: number
    theme: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvitationMetaMinAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvitationMetaMaxAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvitationMetaCountAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvitationMetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvitationMeta to aggregate.
     */
    where?: InvitationMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationMetas to fetch.
     */
    orderBy?: InvitationMetaOrderByWithRelationInput | InvitationMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvitationMetas
    **/
    _count?: true | InvitationMetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMetaMaxAggregateInputType
  }

  export type GetInvitationMetaAggregateType<T extends InvitationMetaAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitationMeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitationMeta[P]>
      : GetScalarType<T[P], AggregateInvitationMeta[P]>
  }




  export type InvitationMetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationMetaWhereInput
    orderBy?: InvitationMetaOrderByWithAggregationInput | InvitationMetaOrderByWithAggregationInput[]
    by: InvitationMetaScalarFieldEnum[] | InvitationMetaScalarFieldEnum
    having?: InvitationMetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationMetaCountAggregateInputType | true
    _min?: InvitationMetaMinAggregateInputType
    _max?: InvitationMetaMaxAggregateInputType
  }

  export type InvitationMetaGroupByOutputType = {
    id: string
    userId: string
    slug: string
    theme: string | null
    createdAt: Date
    updatedAt: Date
    _count: InvitationMetaCountAggregateOutputType | null
    _min: InvitationMetaMinAggregateOutputType | null
    _max: InvitationMetaMaxAggregateOutputType | null
  }

  type GetInvitationMetaGroupByPayload<T extends InvitationMetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationMetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationMetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationMetaGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationMetaGroupByOutputType[P]>
        }
      >
    >


  export type InvitationMetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    slug?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    guests?: boolean | InvitationMeta$guestsArgs<ExtArgs>
    _count?: boolean | InvitationMetaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitationMeta"]>

  export type InvitationMetaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    slug?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitationMeta"]>

  export type InvitationMetaSelectScalar = {
    id?: boolean
    userId?: boolean
    slug?: boolean
    theme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvitationMetaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    guests?: boolean | InvitationMeta$guestsArgs<ExtArgs>
    _count?: boolean | InvitationMetaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvitationMetaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvitationMetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvitationMeta"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      guests: Prisma.$GuestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      slug: string
      theme: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invitationMeta"]>
    composites: {}
  }

  type InvitationMetaGetPayload<S extends boolean | null | undefined | InvitationMetaDefaultArgs> = $Result.GetResult<Prisma.$InvitationMetaPayload, S>

  type InvitationMetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvitationMetaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvitationMetaCountAggregateInputType | true
    }

  export interface InvitationMetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvitationMeta'], meta: { name: 'InvitationMeta' } }
    /**
     * Find zero or one InvitationMeta that matches the filter.
     * @param {InvitationMetaFindUniqueArgs} args - Arguments to find a InvitationMeta
     * @example
     * // Get one InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationMetaFindUniqueArgs>(args: SelectSubset<T, InvitationMetaFindUniqueArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InvitationMeta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InvitationMetaFindUniqueOrThrowArgs} args - Arguments to find a InvitationMeta
     * @example
     * // Get one InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationMetaFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationMetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InvitationMeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaFindFirstArgs} args - Arguments to find a InvitationMeta
     * @example
     * // Get one InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationMetaFindFirstArgs>(args?: SelectSubset<T, InvitationMetaFindFirstArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InvitationMeta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaFindFirstOrThrowArgs} args - Arguments to find a InvitationMeta
     * @example
     * // Get one InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationMetaFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationMetaFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InvitationMetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvitationMetas
     * const invitationMetas = await prisma.invitationMeta.findMany()
     * 
     * // Get first 10 InvitationMetas
     * const invitationMetas = await prisma.invitationMeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationMetaWithIdOnly = await prisma.invitationMeta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationMetaFindManyArgs>(args?: SelectSubset<T, InvitationMetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InvitationMeta.
     * @param {InvitationMetaCreateArgs} args - Arguments to create a InvitationMeta.
     * @example
     * // Create one InvitationMeta
     * const InvitationMeta = await prisma.invitationMeta.create({
     *   data: {
     *     // ... data to create a InvitationMeta
     *   }
     * })
     * 
     */
    create<T extends InvitationMetaCreateArgs>(args: SelectSubset<T, InvitationMetaCreateArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InvitationMetas.
     * @param {InvitationMetaCreateManyArgs} args - Arguments to create many InvitationMetas.
     * @example
     * // Create many InvitationMetas
     * const invitationMeta = await prisma.invitationMeta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationMetaCreateManyArgs>(args?: SelectSubset<T, InvitationMetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvitationMetas and returns the data saved in the database.
     * @param {InvitationMetaCreateManyAndReturnArgs} args - Arguments to create many InvitationMetas.
     * @example
     * // Create many InvitationMetas
     * const invitationMeta = await prisma.invitationMeta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvitationMetas and only return the `id`
     * const invitationMetaWithIdOnly = await prisma.invitationMeta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationMetaCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationMetaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InvitationMeta.
     * @param {InvitationMetaDeleteArgs} args - Arguments to delete one InvitationMeta.
     * @example
     * // Delete one InvitationMeta
     * const InvitationMeta = await prisma.invitationMeta.delete({
     *   where: {
     *     // ... filter to delete one InvitationMeta
     *   }
     * })
     * 
     */
    delete<T extends InvitationMetaDeleteArgs>(args: SelectSubset<T, InvitationMetaDeleteArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InvitationMeta.
     * @param {InvitationMetaUpdateArgs} args - Arguments to update one InvitationMeta.
     * @example
     * // Update one InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationMetaUpdateArgs>(args: SelectSubset<T, InvitationMetaUpdateArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InvitationMetas.
     * @param {InvitationMetaDeleteManyArgs} args - Arguments to filter InvitationMetas to delete.
     * @example
     * // Delete a few InvitationMetas
     * const { count } = await prisma.invitationMeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationMetaDeleteManyArgs>(args?: SelectSubset<T, InvitationMetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvitationMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvitationMetas
     * const invitationMeta = await prisma.invitationMeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationMetaUpdateManyArgs>(args: SelectSubset<T, InvitationMetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvitationMeta.
     * @param {InvitationMetaUpsertArgs} args - Arguments to update or create a InvitationMeta.
     * @example
     * // Update or create a InvitationMeta
     * const invitationMeta = await prisma.invitationMeta.upsert({
     *   create: {
     *     // ... data to create a InvitationMeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvitationMeta we want to update
     *   }
     * })
     */
    upsert<T extends InvitationMetaUpsertArgs>(args: SelectSubset<T, InvitationMetaUpsertArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InvitationMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaCountArgs} args - Arguments to filter InvitationMetas to count.
     * @example
     * // Count the number of InvitationMetas
     * const count = await prisma.invitationMeta.count({
     *   where: {
     *     // ... the filter for the InvitationMetas we want to count
     *   }
     * })
    **/
    count<T extends InvitationMetaCountArgs>(
      args?: Subset<T, InvitationMetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationMetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvitationMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationMetaAggregateArgs>(args: Subset<T, InvitationMetaAggregateArgs>): Prisma.PrismaPromise<GetInvitationMetaAggregateType<T>>

    /**
     * Group by InvitationMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationMetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationMetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationMetaGroupByArgs['orderBy'] }
        : { orderBy?: InvitationMetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationMetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationMetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvitationMeta model
   */
  readonly fields: InvitationMetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvitationMeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationMetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    guests<T extends InvitationMeta$guestsArgs<ExtArgs> = {}>(args?: Subset<T, InvitationMeta$guestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvitationMeta model
   */ 
  interface InvitationMetaFieldRefs {
    readonly id: FieldRef<"InvitationMeta", 'String'>
    readonly userId: FieldRef<"InvitationMeta", 'String'>
    readonly slug: FieldRef<"InvitationMeta", 'String'>
    readonly theme: FieldRef<"InvitationMeta", 'String'>
    readonly createdAt: FieldRef<"InvitationMeta", 'DateTime'>
    readonly updatedAt: FieldRef<"InvitationMeta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InvitationMeta findUnique
   */
  export type InvitationMetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter, which InvitationMeta to fetch.
     */
    where: InvitationMetaWhereUniqueInput
  }

  /**
   * InvitationMeta findUniqueOrThrow
   */
  export type InvitationMetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter, which InvitationMeta to fetch.
     */
    where: InvitationMetaWhereUniqueInput
  }

  /**
   * InvitationMeta findFirst
   */
  export type InvitationMetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter, which InvitationMeta to fetch.
     */
    where?: InvitationMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationMetas to fetch.
     */
    orderBy?: InvitationMetaOrderByWithRelationInput | InvitationMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvitationMetas.
     */
    cursor?: InvitationMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvitationMetas.
     */
    distinct?: InvitationMetaScalarFieldEnum | InvitationMetaScalarFieldEnum[]
  }

  /**
   * InvitationMeta findFirstOrThrow
   */
  export type InvitationMetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter, which InvitationMeta to fetch.
     */
    where?: InvitationMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationMetas to fetch.
     */
    orderBy?: InvitationMetaOrderByWithRelationInput | InvitationMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvitationMetas.
     */
    cursor?: InvitationMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationMetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvitationMetas.
     */
    distinct?: InvitationMetaScalarFieldEnum | InvitationMetaScalarFieldEnum[]
  }

  /**
   * InvitationMeta findMany
   */
  export type InvitationMetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter, which InvitationMetas to fetch.
     */
    where?: InvitationMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationMetas to fetch.
     */
    orderBy?: InvitationMetaOrderByWithRelationInput | InvitationMetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvitationMetas.
     */
    cursor?: InvitationMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationMetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationMetas.
     */
    skip?: number
    distinct?: InvitationMetaScalarFieldEnum | InvitationMetaScalarFieldEnum[]
  }

  /**
   * InvitationMeta create
   */
  export type InvitationMetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * The data needed to create a InvitationMeta.
     */
    data: XOR<InvitationMetaCreateInput, InvitationMetaUncheckedCreateInput>
  }

  /**
   * InvitationMeta createMany
   */
  export type InvitationMetaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvitationMetas.
     */
    data: InvitationMetaCreateManyInput | InvitationMetaCreateManyInput[]
  }

  /**
   * InvitationMeta createManyAndReturn
   */
  export type InvitationMetaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InvitationMetas.
     */
    data: InvitationMetaCreateManyInput | InvitationMetaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvitationMeta update
   */
  export type InvitationMetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * The data needed to update a InvitationMeta.
     */
    data: XOR<InvitationMetaUpdateInput, InvitationMetaUncheckedUpdateInput>
    /**
     * Choose, which InvitationMeta to update.
     */
    where: InvitationMetaWhereUniqueInput
  }

  /**
   * InvitationMeta updateMany
   */
  export type InvitationMetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvitationMetas.
     */
    data: XOR<InvitationMetaUpdateManyMutationInput, InvitationMetaUncheckedUpdateManyInput>
    /**
     * Filter which InvitationMetas to update
     */
    where?: InvitationMetaWhereInput
  }

  /**
   * InvitationMeta upsert
   */
  export type InvitationMetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * The filter to search for the InvitationMeta to update in case it exists.
     */
    where: InvitationMetaWhereUniqueInput
    /**
     * In case the InvitationMeta found by the `where` argument doesn't exist, create a new InvitationMeta with this data.
     */
    create: XOR<InvitationMetaCreateInput, InvitationMetaUncheckedCreateInput>
    /**
     * In case the InvitationMeta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationMetaUpdateInput, InvitationMetaUncheckedUpdateInput>
  }

  /**
   * InvitationMeta delete
   */
  export type InvitationMetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
    /**
     * Filter which InvitationMeta to delete.
     */
    where: InvitationMetaWhereUniqueInput
  }

  /**
   * InvitationMeta deleteMany
   */
  export type InvitationMetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvitationMetas to delete
     */
    where?: InvitationMetaWhereInput
  }

  /**
   * InvitationMeta.guests
   */
  export type InvitationMeta$guestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    where?: GuestWhereInput
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    cursor?: GuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * InvitationMeta without action
   */
  export type InvitationMetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvitationMeta
     */
    select?: InvitationMetaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationMetaInclude<ExtArgs> | null
  }


  /**
   * Model Guest
   */

  export type AggregateGuest = {
    _count: GuestCountAggregateOutputType | null
    _min: GuestMinAggregateOutputType | null
    _max: GuestMaxAggregateOutputType | null
  }

  export type GuestMinAggregateOutputType = {
    id: string | null
    invitationId: string | null
    weddingProfileId: string | null
    name: string | null
    email: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestMaxAggregateOutputType = {
    id: string | null
    invitationId: string | null
    weddingProfileId: string | null
    name: string | null
    email: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestCountAggregateOutputType = {
    id: number
    invitationId: number
    weddingProfileId: number
    name: number
    email: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GuestMinAggregateInputType = {
    id?: true
    invitationId?: true
    weddingProfileId?: true
    name?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestMaxAggregateInputType = {
    id?: true
    invitationId?: true
    weddingProfileId?: true
    name?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestCountAggregateInputType = {
    id?: true
    invitationId?: true
    weddingProfileId?: true
    name?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guest to aggregate.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guests
    **/
    _count?: true | GuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuestMaxAggregateInputType
  }

  export type GetGuestAggregateType<T extends GuestAggregateArgs> = {
        [P in keyof T & keyof AggregateGuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuest[P]>
      : GetScalarType<T[P], AggregateGuest[P]>
  }




  export type GuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestWhereInput
    orderBy?: GuestOrderByWithAggregationInput | GuestOrderByWithAggregationInput[]
    by: GuestScalarFieldEnum[] | GuestScalarFieldEnum
    having?: GuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuestCountAggregateInputType | true
    _min?: GuestMinAggregateInputType
    _max?: GuestMaxAggregateInputType
  }

  export type GuestGroupByOutputType = {
    id: string
    invitationId: string
    weddingProfileId: string | null
    name: string
    email: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: GuestCountAggregateOutputType | null
    _min: GuestMinAggregateOutputType | null
    _max: GuestMaxAggregateOutputType | null
  }

  type GetGuestGroupByPayload<T extends GuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuestGroupByOutputType[P]>
            : GetScalarType<T[P], GuestGroupByOutputType[P]>
        }
      >
    >


  export type GuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invitationId?: boolean
    weddingProfileId?: boolean
    name?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invitation?: boolean | InvitationMetaDefaultArgs<ExtArgs>
    weddingProfile?: boolean | Guest$weddingProfileArgs<ExtArgs>
  }, ExtArgs["result"]["guest"]>

  export type GuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invitationId?: boolean
    weddingProfileId?: boolean
    name?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invitation?: boolean | InvitationMetaDefaultArgs<ExtArgs>
    weddingProfile?: boolean | Guest$weddingProfileArgs<ExtArgs>
  }, ExtArgs["result"]["guest"]>

  export type GuestSelectScalar = {
    id?: boolean
    invitationId?: boolean
    weddingProfileId?: boolean
    name?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitation?: boolean | InvitationMetaDefaultArgs<ExtArgs>
    weddingProfile?: boolean | Guest$weddingProfileArgs<ExtArgs>
  }
  export type GuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitation?: boolean | InvitationMetaDefaultArgs<ExtArgs>
    weddingProfile?: boolean | Guest$weddingProfileArgs<ExtArgs>
  }

  export type $GuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guest"
    objects: {
      invitation: Prisma.$InvitationMetaPayload<ExtArgs>
      weddingProfile: Prisma.$WeddingProfilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      invitationId: string
      weddingProfileId: string | null
      name: string
      email: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["guest"]>
    composites: {}
  }

  type GuestGetPayload<S extends boolean | null | undefined | GuestDefaultArgs> = $Result.GetResult<Prisma.$GuestPayload, S>

  type GuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GuestCountAggregateInputType | true
    }

  export interface GuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guest'], meta: { name: 'Guest' } }
    /**
     * Find zero or one Guest that matches the filter.
     * @param {GuestFindUniqueArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuestFindUniqueArgs>(args: SelectSubset<T, GuestFindUniqueArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Guest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GuestFindUniqueOrThrowArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuestFindUniqueOrThrowArgs>(args: SelectSubset<T, GuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Guest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindFirstArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuestFindFirstArgs>(args?: SelectSubset<T, GuestFindFirstArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Guest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindFirstOrThrowArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuestFindFirstOrThrowArgs>(args?: SelectSubset<T, GuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Guests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guests
     * const guests = await prisma.guest.findMany()
     * 
     * // Get first 10 Guests
     * const guests = await prisma.guest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guestWithIdOnly = await prisma.guest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuestFindManyArgs>(args?: SelectSubset<T, GuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Guest.
     * @param {GuestCreateArgs} args - Arguments to create a Guest.
     * @example
     * // Create one Guest
     * const Guest = await prisma.guest.create({
     *   data: {
     *     // ... data to create a Guest
     *   }
     * })
     * 
     */
    create<T extends GuestCreateArgs>(args: SelectSubset<T, GuestCreateArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Guests.
     * @param {GuestCreateManyArgs} args - Arguments to create many Guests.
     * @example
     * // Create many Guests
     * const guest = await prisma.guest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuestCreateManyArgs>(args?: SelectSubset<T, GuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guests and returns the data saved in the database.
     * @param {GuestCreateManyAndReturnArgs} args - Arguments to create many Guests.
     * @example
     * // Create many Guests
     * const guest = await prisma.guest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guests and only return the `id`
     * const guestWithIdOnly = await prisma.guest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuestCreateManyAndReturnArgs>(args?: SelectSubset<T, GuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Guest.
     * @param {GuestDeleteArgs} args - Arguments to delete one Guest.
     * @example
     * // Delete one Guest
     * const Guest = await prisma.guest.delete({
     *   where: {
     *     // ... filter to delete one Guest
     *   }
     * })
     * 
     */
    delete<T extends GuestDeleteArgs>(args: SelectSubset<T, GuestDeleteArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Guest.
     * @param {GuestUpdateArgs} args - Arguments to update one Guest.
     * @example
     * // Update one Guest
     * const guest = await prisma.guest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuestUpdateArgs>(args: SelectSubset<T, GuestUpdateArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Guests.
     * @param {GuestDeleteManyArgs} args - Arguments to filter Guests to delete.
     * @example
     * // Delete a few Guests
     * const { count } = await prisma.guest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuestDeleteManyArgs>(args?: SelectSubset<T, GuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guests
     * const guest = await prisma.guest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuestUpdateManyArgs>(args: SelectSubset<T, GuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guest.
     * @param {GuestUpsertArgs} args - Arguments to update or create a Guest.
     * @example
     * // Update or create a Guest
     * const guest = await prisma.guest.upsert({
     *   create: {
     *     // ... data to create a Guest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guest we want to update
     *   }
     * })
     */
    upsert<T extends GuestUpsertArgs>(args: SelectSubset<T, GuestUpsertArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Guests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestCountArgs} args - Arguments to filter Guests to count.
     * @example
     * // Count the number of Guests
     * const count = await prisma.guest.count({
     *   where: {
     *     // ... the filter for the Guests we want to count
     *   }
     * })
    **/
    count<T extends GuestCountArgs>(
      args?: Subset<T, GuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuestAggregateArgs>(args: Subset<T, GuestAggregateArgs>): Prisma.PrismaPromise<GetGuestAggregateType<T>>

    /**
     * Group by Guest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuestGroupByArgs['orderBy'] }
        : { orderBy?: GuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guest model
   */
  readonly fields: GuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invitation<T extends InvitationMetaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvitationMetaDefaultArgs<ExtArgs>>): Prisma__InvitationMetaClient<$Result.GetResult<Prisma.$InvitationMetaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    weddingProfile<T extends Guest$weddingProfileArgs<ExtArgs> = {}>(args?: Subset<T, Guest$weddingProfileArgs<ExtArgs>>): Prisma__WeddingProfileClient<$Result.GetResult<Prisma.$WeddingProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Guest model
   */ 
  interface GuestFieldRefs {
    readonly id: FieldRef<"Guest", 'String'>
    readonly invitationId: FieldRef<"Guest", 'String'>
    readonly weddingProfileId: FieldRef<"Guest", 'String'>
    readonly name: FieldRef<"Guest", 'String'>
    readonly email: FieldRef<"Guest", 'String'>
    readonly status: FieldRef<"Guest", 'String'>
    readonly createdAt: FieldRef<"Guest", 'DateTime'>
    readonly updatedAt: FieldRef<"Guest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Guest findUnique
   */
  export type GuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest findUniqueOrThrow
   */
  export type GuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest findFirst
   */
  export type GuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guests.
     */
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest findFirstOrThrow
   */
  export type GuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guests.
     */
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest findMany
   */
  export type GuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guests to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest create
   */
  export type GuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The data needed to create a Guest.
     */
    data: XOR<GuestCreateInput, GuestUncheckedCreateInput>
  }

  /**
   * Guest createMany
   */
  export type GuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guests.
     */
    data: GuestCreateManyInput | GuestCreateManyInput[]
  }

  /**
   * Guest createManyAndReturn
   */
  export type GuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Guests.
     */
    data: GuestCreateManyInput | GuestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Guest update
   */
  export type GuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The data needed to update a Guest.
     */
    data: XOR<GuestUpdateInput, GuestUncheckedUpdateInput>
    /**
     * Choose, which Guest to update.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest updateMany
   */
  export type GuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guests.
     */
    data: XOR<GuestUpdateManyMutationInput, GuestUncheckedUpdateManyInput>
    /**
     * Filter which Guests to update
     */
    where?: GuestWhereInput
  }

  /**
   * Guest upsert
   */
  export type GuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The filter to search for the Guest to update in case it exists.
     */
    where: GuestWhereUniqueInput
    /**
     * In case the Guest found by the `where` argument doesn't exist, create a new Guest with this data.
     */
    create: XOR<GuestCreateInput, GuestUncheckedCreateInput>
    /**
     * In case the Guest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuestUpdateInput, GuestUncheckedUpdateInput>
  }

  /**
   * Guest delete
   */
  export type GuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter which Guest to delete.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest deleteMany
   */
  export type GuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guests to delete
     */
    where?: GuestWhereInput
  }

  /**
   * Guest.weddingProfile
   */
  export type Guest$weddingProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeddingProfile
     */
    select?: WeddingProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeddingProfileInclude<ExtArgs> | null
    where?: WeddingProfileWhereInput
  }

  /**
   * Guest without action
   */
  export type GuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    phoneConfirmed: 'phoneConfirmed',
    role: 'role',
    passwordHash: 'passwordHash',
    refreshTokenHash: 'refreshTokenHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContractorProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyName: 'companyName',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractorProfileScalarFieldEnum = (typeof ContractorProfileScalarFieldEnum)[keyof typeof ContractorProfileScalarFieldEnum]


  export const WeddingProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    coupleNames: 'coupleNames',
    eventDate: 'eventDate',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WeddingProfileScalarFieldEnum = (typeof WeddingProfileScalarFieldEnum)[keyof typeof WeddingProfileScalarFieldEnum]


  export const InvitationMetaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    slug: 'slug',
    theme: 'theme',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvitationMetaScalarFieldEnum = (typeof InvitationMetaScalarFieldEnum)[keyof typeof InvitationMetaScalarFieldEnum]


  export const GuestScalarFieldEnum: {
    id: 'id',
    invitationId: 'invitationId',
    weddingProfileId: 'weddingProfileId',
    name: 'name',
    email: 'email',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GuestScalarFieldEnum = (typeof GuestScalarFieldEnum)[keyof typeof GuestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    phoneConfirmed?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    refreshTokenHash?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    contractorProfile?: XOR<ContractorProfileNullableRelationFilter, ContractorProfileWhereInput> | null
    weddingProfile?: XOR<WeddingProfileNullableRelationFilter, WeddingProfileWhereInput> | null
    invitations?: InvitationMetaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    phoneConfirmed?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    refreshTokenHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contractorProfile?: ContractorProfileOrderByWithRelationInput
    weddingProfile?: WeddingProfileOrderByWithRelationInput
    invitations?: InvitationMetaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    phoneConfirmed?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    refreshTokenHash?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    contractorProfile?: XOR<ContractorProfileNullableRelationFilter, ContractorProfileWhereInput> | null
    weddingProfile?: XOR<WeddingProfileNullableRelationFilter, WeddingProfileWhereInput> | null
    invitations?: InvitationMetaListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    phoneConfirmed?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    refreshTokenHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringWithAggregatesFilter<"User"> | string
    phoneConfirmed?: BoolWithAggregatesFilter<"User"> | boolean
    role?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    refreshTokenHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ContractorProfileWhereInput = {
    AND?: ContractorProfileWhereInput | ContractorProfileWhereInput[]
    OR?: ContractorProfileWhereInput[]
    NOT?: ContractorProfileWhereInput | ContractorProfileWhereInput[]
    id?: StringFilter<"ContractorProfile"> | string
    userId?: StringFilter<"ContractorProfile"> | string
    companyName?: StringFilter<"ContractorProfile"> | string
    description?: StringNullableFilter<"ContractorProfile"> | string | null
    createdAt?: DateTimeFilter<"ContractorProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ContractorProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ContractorProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ContractorProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ContractorProfileWhereInput | ContractorProfileWhereInput[]
    OR?: ContractorProfileWhereInput[]
    NOT?: ContractorProfileWhereInput | ContractorProfileWhereInput[]
    companyName?: StringFilter<"ContractorProfile"> | string
    description?: StringNullableFilter<"ContractorProfile"> | string | null
    createdAt?: DateTimeFilter<"ContractorProfile"> | Date | string
    updatedAt?: DateTimeFilter<"ContractorProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ContractorProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractorProfileCountOrderByAggregateInput
    _max?: ContractorProfileMaxOrderByAggregateInput
    _min?: ContractorProfileMinOrderByAggregateInput
  }

  export type ContractorProfileScalarWhereWithAggregatesInput = {
    AND?: ContractorProfileScalarWhereWithAggregatesInput | ContractorProfileScalarWhereWithAggregatesInput[]
    OR?: ContractorProfileScalarWhereWithAggregatesInput[]
    NOT?: ContractorProfileScalarWhereWithAggregatesInput | ContractorProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContractorProfile"> | string
    userId?: StringWithAggregatesFilter<"ContractorProfile"> | string
    companyName?: StringWithAggregatesFilter<"ContractorProfile"> | string
    description?: StringNullableWithAggregatesFilter<"ContractorProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ContractorProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContractorProfile"> | Date | string
  }

  export type WeddingProfileWhereInput = {
    AND?: WeddingProfileWhereInput | WeddingProfileWhereInput[]
    OR?: WeddingProfileWhereInput[]
    NOT?: WeddingProfileWhereInput | WeddingProfileWhereInput[]
    id?: StringFilter<"WeddingProfile"> | string
    userId?: StringFilter<"WeddingProfile"> | string
    coupleNames?: StringFilter<"WeddingProfile"> | string
    eventDate?: DateTimeNullableFilter<"WeddingProfile"> | Date | string | null
    location?: StringNullableFilter<"WeddingProfile"> | string | null
    createdAt?: DateTimeFilter<"WeddingProfile"> | Date | string
    updatedAt?: DateTimeFilter<"WeddingProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    guests?: GuestListRelationFilter
  }

  export type WeddingProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    coupleNames?: SortOrder
    eventDate?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    guests?: GuestOrderByRelationAggregateInput
  }

  export type WeddingProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: WeddingProfileWhereInput | WeddingProfileWhereInput[]
    OR?: WeddingProfileWhereInput[]
    NOT?: WeddingProfileWhereInput | WeddingProfileWhereInput[]
    coupleNames?: StringFilter<"WeddingProfile"> | string
    eventDate?: DateTimeNullableFilter<"WeddingProfile"> | Date | string | null
    location?: StringNullableFilter<"WeddingProfile"> | string | null
    createdAt?: DateTimeFilter<"WeddingProfile"> | Date | string
    updatedAt?: DateTimeFilter<"WeddingProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    guests?: GuestListRelationFilter
  }, "id" | "userId">

  export type WeddingProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    coupleNames?: SortOrder
    eventDate?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WeddingProfileCountOrderByAggregateInput
    _max?: WeddingProfileMaxOrderByAggregateInput
    _min?: WeddingProfileMinOrderByAggregateInput
  }

  export type WeddingProfileScalarWhereWithAggregatesInput = {
    AND?: WeddingProfileScalarWhereWithAggregatesInput | WeddingProfileScalarWhereWithAggregatesInput[]
    OR?: WeddingProfileScalarWhereWithAggregatesInput[]
    NOT?: WeddingProfileScalarWhereWithAggregatesInput | WeddingProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeddingProfile"> | string
    userId?: StringWithAggregatesFilter<"WeddingProfile"> | string
    coupleNames?: StringWithAggregatesFilter<"WeddingProfile"> | string
    eventDate?: DateTimeNullableWithAggregatesFilter<"WeddingProfile"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"WeddingProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WeddingProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WeddingProfile"> | Date | string
  }

  export type InvitationMetaWhereInput = {
    AND?: InvitationMetaWhereInput | InvitationMetaWhereInput[]
    OR?: InvitationMetaWhereInput[]
    NOT?: InvitationMetaWhereInput | InvitationMetaWhereInput[]
    id?: StringFilter<"InvitationMeta"> | string
    userId?: StringFilter<"InvitationMeta"> | string
    slug?: StringFilter<"InvitationMeta"> | string
    theme?: StringNullableFilter<"InvitationMeta"> | string | null
    createdAt?: DateTimeFilter<"InvitationMeta"> | Date | string
    updatedAt?: DateTimeFilter<"InvitationMeta"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    guests?: GuestListRelationFilter
  }

  export type InvitationMetaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    theme?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    guests?: GuestOrderByRelationAggregateInput
  }

  export type InvitationMetaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: InvitationMetaWhereInput | InvitationMetaWhereInput[]
    OR?: InvitationMetaWhereInput[]
    NOT?: InvitationMetaWhereInput | InvitationMetaWhereInput[]
    userId?: StringFilter<"InvitationMeta"> | string
    theme?: StringNullableFilter<"InvitationMeta"> | string | null
    createdAt?: DateTimeFilter<"InvitationMeta"> | Date | string
    updatedAt?: DateTimeFilter<"InvitationMeta"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    guests?: GuestListRelationFilter
  }, "id" | "slug">

  export type InvitationMetaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    theme?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvitationMetaCountOrderByAggregateInput
    _max?: InvitationMetaMaxOrderByAggregateInput
    _min?: InvitationMetaMinOrderByAggregateInput
  }

  export type InvitationMetaScalarWhereWithAggregatesInput = {
    AND?: InvitationMetaScalarWhereWithAggregatesInput | InvitationMetaScalarWhereWithAggregatesInput[]
    OR?: InvitationMetaScalarWhereWithAggregatesInput[]
    NOT?: InvitationMetaScalarWhereWithAggregatesInput | InvitationMetaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InvitationMeta"> | string
    userId?: StringWithAggregatesFilter<"InvitationMeta"> | string
    slug?: StringWithAggregatesFilter<"InvitationMeta"> | string
    theme?: StringNullableWithAggregatesFilter<"InvitationMeta"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InvitationMeta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InvitationMeta"> | Date | string
  }

  export type GuestWhereInput = {
    AND?: GuestWhereInput | GuestWhereInput[]
    OR?: GuestWhereInput[]
    NOT?: GuestWhereInput | GuestWhereInput[]
    id?: StringFilter<"Guest"> | string
    invitationId?: StringFilter<"Guest"> | string
    weddingProfileId?: StringNullableFilter<"Guest"> | string | null
    name?: StringFilter<"Guest"> | string
    email?: StringNullableFilter<"Guest"> | string | null
    status?: StringFilter<"Guest"> | string
    createdAt?: DateTimeFilter<"Guest"> | Date | string
    updatedAt?: DateTimeFilter<"Guest"> | Date | string
    invitation?: XOR<InvitationMetaRelationFilter, InvitationMetaWhereInput>
    weddingProfile?: XOR<WeddingProfileNullableRelationFilter, WeddingProfileWhereInput> | null
  }

  export type GuestOrderByWithRelationInput = {
    id?: SortOrder
    invitationId?: SortOrder
    weddingProfileId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    invitation?: InvitationMetaOrderByWithRelationInput
    weddingProfile?: WeddingProfileOrderByWithRelationInput
  }

  export type GuestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuestWhereInput | GuestWhereInput[]
    OR?: GuestWhereInput[]
    NOT?: GuestWhereInput | GuestWhereInput[]
    invitationId?: StringFilter<"Guest"> | string
    weddingProfileId?: StringNullableFilter<"Guest"> | string | null
    name?: StringFilter<"Guest"> | string
    email?: StringNullableFilter<"Guest"> | string | null
    status?: StringFilter<"Guest"> | string
    createdAt?: DateTimeFilter<"Guest"> | Date | string
    updatedAt?: DateTimeFilter<"Guest"> | Date | string
    invitation?: XOR<InvitationMetaRelationFilter, InvitationMetaWhereInput>
    weddingProfile?: XOR<WeddingProfileNullableRelationFilter, WeddingProfileWhereInput> | null
  }, "id">

  export type GuestOrderByWithAggregationInput = {
    id?: SortOrder
    invitationId?: SortOrder
    weddingProfileId?: SortOrderInput | SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GuestCountOrderByAggregateInput
    _max?: GuestMaxOrderByAggregateInput
    _min?: GuestMinOrderByAggregateInput
  }

  export type GuestScalarWhereWithAggregatesInput = {
    AND?: GuestScalarWhereWithAggregatesInput | GuestScalarWhereWithAggregatesInput[]
    OR?: GuestScalarWhereWithAggregatesInput[]
    NOT?: GuestScalarWhereWithAggregatesInput | GuestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Guest"> | string
    invitationId?: StringWithAggregatesFilter<"Guest"> | string
    weddingProfileId?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    name?: StringWithAggregatesFilter<"Guest"> | string
    email?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    status?: StringWithAggregatesFilter<"Guest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Guest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Guest"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileCreateNestedOneWithoutUserInput
    weddingProfile?: WeddingProfileCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileUncheckedCreateNestedOneWithoutUserInput
    weddingProfile?: WeddingProfileUncheckedCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUpdateOneWithoutUserNestedInput
    weddingProfile?: WeddingProfileUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUncheckedUpdateOneWithoutUserNestedInput
    weddingProfile?: WeddingProfileUncheckedUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorProfileCreateInput = {
    id?: string
    companyName?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContractorProfileInput
  }

  export type ContractorProfileUncheckedCreateInput = {
    id?: string
    userId: string
    companyName?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContractorProfileNestedInput
  }

  export type ContractorProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorProfileCreateManyInput = {
    id?: string
    userId: string
    companyName?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeddingProfileCreateInput = {
    id?: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWeddingProfileInput
    guests?: GuestCreateNestedManyWithoutWeddingProfileInput
  }

  export type WeddingProfileUncheckedCreateInput = {
    id?: string
    userId: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestUncheckedCreateNestedManyWithoutWeddingProfileInput
  }

  export type WeddingProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeddingProfileNestedInput
    guests?: GuestUpdateManyWithoutWeddingProfileNestedInput
  }

  export type WeddingProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUncheckedUpdateManyWithoutWeddingProfileNestedInput
  }

  export type WeddingProfileCreateManyInput = {
    id?: string
    userId: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeddingProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeddingProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationMetaCreateInput = {
    id?: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvitationsInput
    guests?: GuestCreateNestedManyWithoutInvitationInput
  }

  export type InvitationMetaUncheckedCreateInput = {
    id?: string
    userId: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestUncheckedCreateNestedManyWithoutInvitationInput
  }

  export type InvitationMetaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
    guests?: GuestUpdateManyWithoutInvitationNestedInput
  }

  export type InvitationMetaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUncheckedUpdateManyWithoutInvitationNestedInput
  }

  export type InvitationMetaCreateManyInput = {
    id?: string
    userId: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationMetaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationMetaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestCreateInput = {
    id?: string
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invitation: InvitationMetaCreateNestedOneWithoutGuestsInput
    weddingProfile?: WeddingProfileCreateNestedOneWithoutGuestsInput
  }

  export type GuestUncheckedCreateInput = {
    id?: string
    invitationId: string
    weddingProfileId?: string | null
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitation?: InvitationMetaUpdateOneRequiredWithoutGuestsNestedInput
    weddingProfile?: WeddingProfileUpdateOneWithoutGuestsNestedInput
  }

  export type GuestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invitationId?: StringFieldUpdateOperationsInput | string
    weddingProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestCreateManyInput = {
    id?: string
    invitationId: string
    weddingProfileId?: string | null
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    invitationId?: StringFieldUpdateOperationsInput | string
    weddingProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContractorProfileNullableRelationFilter = {
    is?: ContractorProfileWhereInput | null
    isNot?: ContractorProfileWhereInput | null
  }

  export type WeddingProfileNullableRelationFilter = {
    is?: WeddingProfileWhereInput | null
    isNot?: WeddingProfileWhereInput | null
  }

  export type InvitationMetaListRelationFilter = {
    every?: InvitationMetaWhereInput
    some?: InvitationMetaWhereInput
    none?: InvitationMetaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InvitationMetaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    phoneConfirmed?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    refreshTokenHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    phoneConfirmed?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    refreshTokenHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    phoneConfirmed?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    refreshTokenHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ContractorProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GuestListRelationFilter = {
    every?: GuestWhereInput
    some?: GuestWhereInput
    none?: GuestWhereInput
  }

  export type GuestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeddingProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    coupleNames?: SortOrder
    eventDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeddingProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    coupleNames?: SortOrder
    eventDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeddingProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    coupleNames?: SortOrder
    eventDate?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InvitationMetaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationMetaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationMetaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvitationMetaRelationFilter = {
    is?: InvitationMetaWhereInput
    isNot?: InvitationMetaWhereInput
  }

  export type GuestCountOrderByAggregateInput = {
    id?: SortOrder
    invitationId?: SortOrder
    weddingProfileId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestMaxOrderByAggregateInput = {
    id?: SortOrder
    invitationId?: SortOrder
    weddingProfileId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestMinOrderByAggregateInput = {
    id?: SortOrder
    invitationId?: SortOrder
    weddingProfileId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractorProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContractorProfileCreateOrConnectWithoutUserInput
    connect?: ContractorProfileWhereUniqueInput
  }

  export type WeddingProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutUserInput
    connect?: WeddingProfileWhereUniqueInput
  }

  export type InvitationMetaCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput> | InvitationMetaCreateWithoutUserInput[] | InvitationMetaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutUserInput | InvitationMetaCreateOrConnectWithoutUserInput[]
    createMany?: InvitationMetaCreateManyUserInputEnvelope
    connect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
  }

  export type ContractorProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContractorProfileCreateOrConnectWithoutUserInput
    connect?: ContractorProfileWhereUniqueInput
  }

  export type WeddingProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutUserInput
    connect?: WeddingProfileWhereUniqueInput
  }

  export type InvitationMetaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput> | InvitationMetaCreateWithoutUserInput[] | InvitationMetaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutUserInput | InvitationMetaCreateOrConnectWithoutUserInput[]
    createMany?: InvitationMetaCreateManyUserInputEnvelope
    connect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContractorProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContractorProfileCreateOrConnectWithoutUserInput
    upsert?: ContractorProfileUpsertWithoutUserInput
    disconnect?: ContractorProfileWhereInput | boolean
    delete?: ContractorProfileWhereInput | boolean
    connect?: ContractorProfileWhereUniqueInput
    update?: XOR<XOR<ContractorProfileUpdateToOneWithWhereWithoutUserInput, ContractorProfileUpdateWithoutUserInput>, ContractorProfileUncheckedUpdateWithoutUserInput>
  }

  export type WeddingProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutUserInput
    upsert?: WeddingProfileUpsertWithoutUserInput
    disconnect?: WeddingProfileWhereInput | boolean
    delete?: WeddingProfileWhereInput | boolean
    connect?: WeddingProfileWhereUniqueInput
    update?: XOR<XOR<WeddingProfileUpdateToOneWithWhereWithoutUserInput, WeddingProfileUpdateWithoutUserInput>, WeddingProfileUncheckedUpdateWithoutUserInput>
  }

  export type InvitationMetaUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput> | InvitationMetaCreateWithoutUserInput[] | InvitationMetaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutUserInput | InvitationMetaCreateOrConnectWithoutUserInput[]
    upsert?: InvitationMetaUpsertWithWhereUniqueWithoutUserInput | InvitationMetaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationMetaCreateManyUserInputEnvelope
    set?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    disconnect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    delete?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    connect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    update?: InvitationMetaUpdateWithWhereUniqueWithoutUserInput | InvitationMetaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationMetaUpdateManyWithWhereWithoutUserInput | InvitationMetaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationMetaScalarWhereInput | InvitationMetaScalarWhereInput[]
  }

  export type ContractorProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ContractorProfileCreateOrConnectWithoutUserInput
    upsert?: ContractorProfileUpsertWithoutUserInput
    disconnect?: ContractorProfileWhereInput | boolean
    delete?: ContractorProfileWhereInput | boolean
    connect?: ContractorProfileWhereUniqueInput
    update?: XOR<XOR<ContractorProfileUpdateToOneWithWhereWithoutUserInput, ContractorProfileUpdateWithoutUserInput>, ContractorProfileUncheckedUpdateWithoutUserInput>
  }

  export type WeddingProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutUserInput
    upsert?: WeddingProfileUpsertWithoutUserInput
    disconnect?: WeddingProfileWhereInput | boolean
    delete?: WeddingProfileWhereInput | boolean
    connect?: WeddingProfileWhereUniqueInput
    update?: XOR<XOR<WeddingProfileUpdateToOneWithWhereWithoutUserInput, WeddingProfileUpdateWithoutUserInput>, WeddingProfileUncheckedUpdateWithoutUserInput>
  }

  export type InvitationMetaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput> | InvitationMetaCreateWithoutUserInput[] | InvitationMetaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutUserInput | InvitationMetaCreateOrConnectWithoutUserInput[]
    upsert?: InvitationMetaUpsertWithWhereUniqueWithoutUserInput | InvitationMetaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvitationMetaCreateManyUserInputEnvelope
    set?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    disconnect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    delete?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    connect?: InvitationMetaWhereUniqueInput | InvitationMetaWhereUniqueInput[]
    update?: InvitationMetaUpdateWithWhereUniqueWithoutUserInput | InvitationMetaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvitationMetaUpdateManyWithWhereWithoutUserInput | InvitationMetaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvitationMetaScalarWhereInput | InvitationMetaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContractorProfileInput = {
    create?: XOR<UserCreateWithoutContractorProfileInput, UserUncheckedCreateWithoutContractorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutContractorProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContractorProfileNestedInput = {
    create?: XOR<UserCreateWithoutContractorProfileInput, UserUncheckedCreateWithoutContractorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutContractorProfileInput
    upsert?: UserUpsertWithoutContractorProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContractorProfileInput, UserUpdateWithoutContractorProfileInput>, UserUncheckedUpdateWithoutContractorProfileInput>
  }

  export type UserCreateNestedOneWithoutWeddingProfileInput = {
    create?: XOR<UserCreateWithoutWeddingProfileInput, UserUncheckedCreateWithoutWeddingProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeddingProfileInput
    connect?: UserWhereUniqueInput
  }

  export type GuestCreateNestedManyWithoutWeddingProfileInput = {
    create?: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput> | GuestCreateWithoutWeddingProfileInput[] | GuestUncheckedCreateWithoutWeddingProfileInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutWeddingProfileInput | GuestCreateOrConnectWithoutWeddingProfileInput[]
    createMany?: GuestCreateManyWeddingProfileInputEnvelope
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
  }

  export type GuestUncheckedCreateNestedManyWithoutWeddingProfileInput = {
    create?: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput> | GuestCreateWithoutWeddingProfileInput[] | GuestUncheckedCreateWithoutWeddingProfileInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutWeddingProfileInput | GuestCreateOrConnectWithoutWeddingProfileInput[]
    createMany?: GuestCreateManyWeddingProfileInputEnvelope
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutWeddingProfileNestedInput = {
    create?: XOR<UserCreateWithoutWeddingProfileInput, UserUncheckedCreateWithoutWeddingProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutWeddingProfileInput
    upsert?: UserUpsertWithoutWeddingProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWeddingProfileInput, UserUpdateWithoutWeddingProfileInput>, UserUncheckedUpdateWithoutWeddingProfileInput>
  }

  export type GuestUpdateManyWithoutWeddingProfileNestedInput = {
    create?: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput> | GuestCreateWithoutWeddingProfileInput[] | GuestUncheckedCreateWithoutWeddingProfileInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutWeddingProfileInput | GuestCreateOrConnectWithoutWeddingProfileInput[]
    upsert?: GuestUpsertWithWhereUniqueWithoutWeddingProfileInput | GuestUpsertWithWhereUniqueWithoutWeddingProfileInput[]
    createMany?: GuestCreateManyWeddingProfileInputEnvelope
    set?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    disconnect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    delete?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    update?: GuestUpdateWithWhereUniqueWithoutWeddingProfileInput | GuestUpdateWithWhereUniqueWithoutWeddingProfileInput[]
    updateMany?: GuestUpdateManyWithWhereWithoutWeddingProfileInput | GuestUpdateManyWithWhereWithoutWeddingProfileInput[]
    deleteMany?: GuestScalarWhereInput | GuestScalarWhereInput[]
  }

  export type GuestUncheckedUpdateManyWithoutWeddingProfileNestedInput = {
    create?: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput> | GuestCreateWithoutWeddingProfileInput[] | GuestUncheckedCreateWithoutWeddingProfileInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutWeddingProfileInput | GuestCreateOrConnectWithoutWeddingProfileInput[]
    upsert?: GuestUpsertWithWhereUniqueWithoutWeddingProfileInput | GuestUpsertWithWhereUniqueWithoutWeddingProfileInput[]
    createMany?: GuestCreateManyWeddingProfileInputEnvelope
    set?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    disconnect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    delete?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    update?: GuestUpdateWithWhereUniqueWithoutWeddingProfileInput | GuestUpdateWithWhereUniqueWithoutWeddingProfileInput[]
    updateMany?: GuestUpdateManyWithWhereWithoutWeddingProfileInput | GuestUpdateManyWithWhereWithoutWeddingProfileInput[]
    deleteMany?: GuestScalarWhereInput | GuestScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type GuestCreateNestedManyWithoutInvitationInput = {
    create?: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput> | GuestCreateWithoutInvitationInput[] | GuestUncheckedCreateWithoutInvitationInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutInvitationInput | GuestCreateOrConnectWithoutInvitationInput[]
    createMany?: GuestCreateManyInvitationInputEnvelope
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
  }

  export type GuestUncheckedCreateNestedManyWithoutInvitationInput = {
    create?: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput> | GuestCreateWithoutInvitationInput[] | GuestUncheckedCreateWithoutInvitationInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutInvitationInput | GuestCreateOrConnectWithoutInvitationInput[]
    createMany?: GuestCreateManyInvitationInputEnvelope
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsInput
    upsert?: UserUpsertWithoutInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsInput, UserUpdateWithoutInvitationsInput>, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type GuestUpdateManyWithoutInvitationNestedInput = {
    create?: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput> | GuestCreateWithoutInvitationInput[] | GuestUncheckedCreateWithoutInvitationInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutInvitationInput | GuestCreateOrConnectWithoutInvitationInput[]
    upsert?: GuestUpsertWithWhereUniqueWithoutInvitationInput | GuestUpsertWithWhereUniqueWithoutInvitationInput[]
    createMany?: GuestCreateManyInvitationInputEnvelope
    set?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    disconnect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    delete?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    update?: GuestUpdateWithWhereUniqueWithoutInvitationInput | GuestUpdateWithWhereUniqueWithoutInvitationInput[]
    updateMany?: GuestUpdateManyWithWhereWithoutInvitationInput | GuestUpdateManyWithWhereWithoutInvitationInput[]
    deleteMany?: GuestScalarWhereInput | GuestScalarWhereInput[]
  }

  export type GuestUncheckedUpdateManyWithoutInvitationNestedInput = {
    create?: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput> | GuestCreateWithoutInvitationInput[] | GuestUncheckedCreateWithoutInvitationInput[]
    connectOrCreate?: GuestCreateOrConnectWithoutInvitationInput | GuestCreateOrConnectWithoutInvitationInput[]
    upsert?: GuestUpsertWithWhereUniqueWithoutInvitationInput | GuestUpsertWithWhereUniqueWithoutInvitationInput[]
    createMany?: GuestCreateManyInvitationInputEnvelope
    set?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    disconnect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    delete?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    connect?: GuestWhereUniqueInput | GuestWhereUniqueInput[]
    update?: GuestUpdateWithWhereUniqueWithoutInvitationInput | GuestUpdateWithWhereUniqueWithoutInvitationInput[]
    updateMany?: GuestUpdateManyWithWhereWithoutInvitationInput | GuestUpdateManyWithWhereWithoutInvitationInput[]
    deleteMany?: GuestScalarWhereInput | GuestScalarWhereInput[]
  }

  export type InvitationMetaCreateNestedOneWithoutGuestsInput = {
    create?: XOR<InvitationMetaCreateWithoutGuestsInput, InvitationMetaUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutGuestsInput
    connect?: InvitationMetaWhereUniqueInput
  }

  export type WeddingProfileCreateNestedOneWithoutGuestsInput = {
    create?: XOR<WeddingProfileCreateWithoutGuestsInput, WeddingProfileUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutGuestsInput
    connect?: WeddingProfileWhereUniqueInput
  }

  export type InvitationMetaUpdateOneRequiredWithoutGuestsNestedInput = {
    create?: XOR<InvitationMetaCreateWithoutGuestsInput, InvitationMetaUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: InvitationMetaCreateOrConnectWithoutGuestsInput
    upsert?: InvitationMetaUpsertWithoutGuestsInput
    connect?: InvitationMetaWhereUniqueInput
    update?: XOR<XOR<InvitationMetaUpdateToOneWithWhereWithoutGuestsInput, InvitationMetaUpdateWithoutGuestsInput>, InvitationMetaUncheckedUpdateWithoutGuestsInput>
  }

  export type WeddingProfileUpdateOneWithoutGuestsNestedInput = {
    create?: XOR<WeddingProfileCreateWithoutGuestsInput, WeddingProfileUncheckedCreateWithoutGuestsInput>
    connectOrCreate?: WeddingProfileCreateOrConnectWithoutGuestsInput
    upsert?: WeddingProfileUpsertWithoutGuestsInput
    disconnect?: WeddingProfileWhereInput | boolean
    delete?: WeddingProfileWhereInput | boolean
    connect?: WeddingProfileWhereUniqueInput
    update?: XOR<XOR<WeddingProfileUpdateToOneWithWhereWithoutGuestsInput, WeddingProfileUpdateWithoutGuestsInput>, WeddingProfileUncheckedUpdateWithoutGuestsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ContractorProfileCreateWithoutUserInput = {
    id?: string
    companyName?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorProfileUncheckedCreateWithoutUserInput = {
    id?: string
    companyName?: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractorProfileCreateOrConnectWithoutUserInput = {
    where: ContractorProfileWhereUniqueInput
    create: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
  }

  export type WeddingProfileCreateWithoutUserInput = {
    id?: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestCreateNestedManyWithoutWeddingProfileInput
  }

  export type WeddingProfileUncheckedCreateWithoutUserInput = {
    id?: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestUncheckedCreateNestedManyWithoutWeddingProfileInput
  }

  export type WeddingProfileCreateOrConnectWithoutUserInput = {
    where: WeddingProfileWhereUniqueInput
    create: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
  }

  export type InvitationMetaCreateWithoutUserInput = {
    id?: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestCreateNestedManyWithoutInvitationInput
  }

  export type InvitationMetaUncheckedCreateWithoutUserInput = {
    id?: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guests?: GuestUncheckedCreateNestedManyWithoutInvitationInput
  }

  export type InvitationMetaCreateOrConnectWithoutUserInput = {
    where: InvitationMetaWhereUniqueInput
    create: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput>
  }

  export type InvitationMetaCreateManyUserInputEnvelope = {
    data: InvitationMetaCreateManyUserInput | InvitationMetaCreateManyUserInput[]
  }

  export type ContractorProfileUpsertWithoutUserInput = {
    update: XOR<ContractorProfileUpdateWithoutUserInput, ContractorProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ContractorProfileCreateWithoutUserInput, ContractorProfileUncheckedCreateWithoutUserInput>
    where?: ContractorProfileWhereInput
  }

  export type ContractorProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ContractorProfileWhereInput
    data: XOR<ContractorProfileUpdateWithoutUserInput, ContractorProfileUncheckedUpdateWithoutUserInput>
  }

  export type ContractorProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractorProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeddingProfileUpsertWithoutUserInput = {
    update: XOR<WeddingProfileUpdateWithoutUserInput, WeddingProfileUncheckedUpdateWithoutUserInput>
    create: XOR<WeddingProfileCreateWithoutUserInput, WeddingProfileUncheckedCreateWithoutUserInput>
    where?: WeddingProfileWhereInput
  }

  export type WeddingProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: WeddingProfileWhereInput
    data: XOR<WeddingProfileUpdateWithoutUserInput, WeddingProfileUncheckedUpdateWithoutUserInput>
  }

  export type WeddingProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUpdateManyWithoutWeddingProfileNestedInput
  }

  export type WeddingProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUncheckedUpdateManyWithoutWeddingProfileNestedInput
  }

  export type InvitationMetaUpsertWithWhereUniqueWithoutUserInput = {
    where: InvitationMetaWhereUniqueInput
    update: XOR<InvitationMetaUpdateWithoutUserInput, InvitationMetaUncheckedUpdateWithoutUserInput>
    create: XOR<InvitationMetaCreateWithoutUserInput, InvitationMetaUncheckedCreateWithoutUserInput>
  }

  export type InvitationMetaUpdateWithWhereUniqueWithoutUserInput = {
    where: InvitationMetaWhereUniqueInput
    data: XOR<InvitationMetaUpdateWithoutUserInput, InvitationMetaUncheckedUpdateWithoutUserInput>
  }

  export type InvitationMetaUpdateManyWithWhereWithoutUserInput = {
    where: InvitationMetaScalarWhereInput
    data: XOR<InvitationMetaUpdateManyMutationInput, InvitationMetaUncheckedUpdateManyWithoutUserInput>
  }

  export type InvitationMetaScalarWhereInput = {
    AND?: InvitationMetaScalarWhereInput | InvitationMetaScalarWhereInput[]
    OR?: InvitationMetaScalarWhereInput[]
    NOT?: InvitationMetaScalarWhereInput | InvitationMetaScalarWhereInput[]
    id?: StringFilter<"InvitationMeta"> | string
    userId?: StringFilter<"InvitationMeta"> | string
    slug?: StringFilter<"InvitationMeta"> | string
    theme?: StringNullableFilter<"InvitationMeta"> | string | null
    createdAt?: DateTimeFilter<"InvitationMeta"> | Date | string
    updatedAt?: DateTimeFilter<"InvitationMeta"> | Date | string
  }

  export type UserCreateWithoutContractorProfileInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    weddingProfile?: WeddingProfileCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContractorProfileInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    weddingProfile?: WeddingProfileUncheckedCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContractorProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContractorProfileInput, UserUncheckedCreateWithoutContractorProfileInput>
  }

  export type UserUpsertWithoutContractorProfileInput = {
    update: XOR<UserUpdateWithoutContractorProfileInput, UserUncheckedUpdateWithoutContractorProfileInput>
    create: XOR<UserCreateWithoutContractorProfileInput, UserUncheckedCreateWithoutContractorProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContractorProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContractorProfileInput, UserUncheckedUpdateWithoutContractorProfileInput>
  }

  export type UserUpdateWithoutContractorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingProfile?: WeddingProfileUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContractorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingProfile?: WeddingProfileUncheckedUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWeddingProfileInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWeddingProfileInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileUncheckedCreateNestedOneWithoutUserInput
    invitations?: InvitationMetaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWeddingProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWeddingProfileInput, UserUncheckedCreateWithoutWeddingProfileInput>
  }

  export type GuestCreateWithoutWeddingProfileInput = {
    id?: string
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invitation: InvitationMetaCreateNestedOneWithoutGuestsInput
  }

  export type GuestUncheckedCreateWithoutWeddingProfileInput = {
    id?: string
    invitationId: string
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestCreateOrConnectWithoutWeddingProfileInput = {
    where: GuestWhereUniqueInput
    create: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput>
  }

  export type GuestCreateManyWeddingProfileInputEnvelope = {
    data: GuestCreateManyWeddingProfileInput | GuestCreateManyWeddingProfileInput[]
  }

  export type UserUpsertWithoutWeddingProfileInput = {
    update: XOR<UserUpdateWithoutWeddingProfileInput, UserUncheckedUpdateWithoutWeddingProfileInput>
    create: XOR<UserCreateWithoutWeddingProfileInput, UserUncheckedCreateWithoutWeddingProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWeddingProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWeddingProfileInput, UserUncheckedUpdateWithoutWeddingProfileInput>
  }

  export type UserUpdateWithoutWeddingProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWeddingProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUncheckedUpdateOneWithoutUserNestedInput
    invitations?: InvitationMetaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GuestUpsertWithWhereUniqueWithoutWeddingProfileInput = {
    where: GuestWhereUniqueInput
    update: XOR<GuestUpdateWithoutWeddingProfileInput, GuestUncheckedUpdateWithoutWeddingProfileInput>
    create: XOR<GuestCreateWithoutWeddingProfileInput, GuestUncheckedCreateWithoutWeddingProfileInput>
  }

  export type GuestUpdateWithWhereUniqueWithoutWeddingProfileInput = {
    where: GuestWhereUniqueInput
    data: XOR<GuestUpdateWithoutWeddingProfileInput, GuestUncheckedUpdateWithoutWeddingProfileInput>
  }

  export type GuestUpdateManyWithWhereWithoutWeddingProfileInput = {
    where: GuestScalarWhereInput
    data: XOR<GuestUpdateManyMutationInput, GuestUncheckedUpdateManyWithoutWeddingProfileInput>
  }

  export type GuestScalarWhereInput = {
    AND?: GuestScalarWhereInput | GuestScalarWhereInput[]
    OR?: GuestScalarWhereInput[]
    NOT?: GuestScalarWhereInput | GuestScalarWhereInput[]
    id?: StringFilter<"Guest"> | string
    invitationId?: StringFilter<"Guest"> | string
    weddingProfileId?: StringNullableFilter<"Guest"> | string | null
    name?: StringFilter<"Guest"> | string
    email?: StringNullableFilter<"Guest"> | string | null
    status?: StringFilter<"Guest"> | string
    createdAt?: DateTimeFilter<"Guest"> | Date | string
    updatedAt?: DateTimeFilter<"Guest"> | Date | string
  }

  export type UserCreateWithoutInvitationsInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileCreateNestedOneWithoutUserInput
    weddingProfile?: WeddingProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitationsInput = {
    id?: string
    email?: string | null
    phone: string
    phoneConfirmed?: boolean
    role?: string
    passwordHash: string
    refreshTokenHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractorProfile?: ContractorProfileUncheckedCreateNestedOneWithoutUserInput
    weddingProfile?: WeddingProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
  }

  export type GuestCreateWithoutInvitationInput = {
    id?: string
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    weddingProfile?: WeddingProfileCreateNestedOneWithoutGuestsInput
  }

  export type GuestUncheckedCreateWithoutInvitationInput = {
    id?: string
    weddingProfileId?: string | null
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestCreateOrConnectWithoutInvitationInput = {
    where: GuestWhereUniqueInput
    create: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput>
  }

  export type GuestCreateManyInvitationInputEnvelope = {
    data: GuestCreateManyInvitationInput | GuestCreateManyInvitationInput[]
  }

  export type UserUpsertWithoutInvitationsInput = {
    update: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
    create: XOR<UserCreateWithoutInvitationsInput, UserUncheckedCreateWithoutInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitationsInput, UserUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUpdateOneWithoutUserNestedInput
    weddingProfile?: WeddingProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    phoneConfirmed?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    refreshTokenHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractorProfile?: ContractorProfileUncheckedUpdateOneWithoutUserNestedInput
    weddingProfile?: WeddingProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GuestUpsertWithWhereUniqueWithoutInvitationInput = {
    where: GuestWhereUniqueInput
    update: XOR<GuestUpdateWithoutInvitationInput, GuestUncheckedUpdateWithoutInvitationInput>
    create: XOR<GuestCreateWithoutInvitationInput, GuestUncheckedCreateWithoutInvitationInput>
  }

  export type GuestUpdateWithWhereUniqueWithoutInvitationInput = {
    where: GuestWhereUniqueInput
    data: XOR<GuestUpdateWithoutInvitationInput, GuestUncheckedUpdateWithoutInvitationInput>
  }

  export type GuestUpdateManyWithWhereWithoutInvitationInput = {
    where: GuestScalarWhereInput
    data: XOR<GuestUpdateManyMutationInput, GuestUncheckedUpdateManyWithoutInvitationInput>
  }

  export type InvitationMetaCreateWithoutGuestsInput = {
    id?: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvitationsInput
  }

  export type InvitationMetaUncheckedCreateWithoutGuestsInput = {
    id?: string
    userId: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationMetaCreateOrConnectWithoutGuestsInput = {
    where: InvitationMetaWhereUniqueInput
    create: XOR<InvitationMetaCreateWithoutGuestsInput, InvitationMetaUncheckedCreateWithoutGuestsInput>
  }

  export type WeddingProfileCreateWithoutGuestsInput = {
    id?: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWeddingProfileInput
  }

  export type WeddingProfileUncheckedCreateWithoutGuestsInput = {
    id?: string
    userId: string
    coupleNames?: string
    eventDate?: Date | string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeddingProfileCreateOrConnectWithoutGuestsInput = {
    where: WeddingProfileWhereUniqueInput
    create: XOR<WeddingProfileCreateWithoutGuestsInput, WeddingProfileUncheckedCreateWithoutGuestsInput>
  }

  export type InvitationMetaUpsertWithoutGuestsInput = {
    update: XOR<InvitationMetaUpdateWithoutGuestsInput, InvitationMetaUncheckedUpdateWithoutGuestsInput>
    create: XOR<InvitationMetaCreateWithoutGuestsInput, InvitationMetaUncheckedCreateWithoutGuestsInput>
    where?: InvitationMetaWhereInput
  }

  export type InvitationMetaUpdateToOneWithWhereWithoutGuestsInput = {
    where?: InvitationMetaWhereInput
    data: XOR<InvitationMetaUpdateWithoutGuestsInput, InvitationMetaUncheckedUpdateWithoutGuestsInput>
  }

  export type InvitationMetaUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvitationsNestedInput
  }

  export type InvitationMetaUncheckedUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeddingProfileUpsertWithoutGuestsInput = {
    update: XOR<WeddingProfileUpdateWithoutGuestsInput, WeddingProfileUncheckedUpdateWithoutGuestsInput>
    create: XOR<WeddingProfileCreateWithoutGuestsInput, WeddingProfileUncheckedCreateWithoutGuestsInput>
    where?: WeddingProfileWhereInput
  }

  export type WeddingProfileUpdateToOneWithWhereWithoutGuestsInput = {
    where?: WeddingProfileWhereInput
    data: XOR<WeddingProfileUpdateWithoutGuestsInput, WeddingProfileUncheckedUpdateWithoutGuestsInput>
  }

  export type WeddingProfileUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWeddingProfileNestedInput
  }

  export type WeddingProfileUncheckedUpdateWithoutGuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    coupleNames?: StringFieldUpdateOperationsInput | string
    eventDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationMetaCreateManyUserInput = {
    id?: string
    slug: string
    theme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InvitationMetaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUpdateManyWithoutInvitationNestedInput
  }

  export type InvitationMetaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guests?: GuestUncheckedUpdateManyWithoutInvitationNestedInput
  }

  export type InvitationMetaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestCreateManyWeddingProfileInput = {
    id?: string
    invitationId: string
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUpdateWithoutWeddingProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitation?: InvitationMetaUpdateOneRequiredWithoutGuestsNestedInput
  }

  export type GuestUncheckedUpdateWithoutWeddingProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    invitationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestUncheckedUpdateManyWithoutWeddingProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    invitationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestCreateManyInvitationInput = {
    id?: string
    weddingProfileId?: string | null
    name: string
    email?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUpdateWithoutInvitationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingProfile?: WeddingProfileUpdateOneWithoutGuestsNestedInput
  }

  export type GuestUncheckedUpdateWithoutInvitationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weddingProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestUncheckedUpdateManyWithoutInvitationInput = {
    id?: StringFieldUpdateOperationsInput | string
    weddingProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeddingProfileCountOutputTypeDefaultArgs instead
     */
    export type WeddingProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeddingProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvitationMetaCountOutputTypeDefaultArgs instead
     */
    export type InvitationMetaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvitationMetaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContractorProfileDefaultArgs instead
     */
    export type ContractorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContractorProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeddingProfileDefaultArgs instead
     */
    export type WeddingProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeddingProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvitationMetaDefaultArgs instead
     */
    export type InvitationMetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvitationMetaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuestDefaultArgs instead
     */
    export type GuestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuestDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}